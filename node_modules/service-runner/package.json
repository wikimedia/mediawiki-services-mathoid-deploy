{
  "name": "service-runner",
  "version": "0.2.1",
  "description": "Generic nodejs service supervisor / cluster runner",
  "main": "service-runner.js",
  "bin": {
    "service-runner": "./service-runner.js"
  },
  "scripts": {
    "start": "./service-runner.js",
    "test": "mocha",
    "coverage": "istanbul cover _mocha -- -R spec",
    "coveralls": "cat ./coverage/lcov.info | coveralls"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wikimedia/service-runner.git"
  },
  "keywords": [
    "supervisor",
    "cluster",
    "logging",
    "statsd"
  ],
  "author": {
    "name": "Wikimedia service team",
    "email": "services@wikimedia.org"
  },
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/wikimedia/service-runner/issues"
  },
  "homepage": "https://github.com/wikimedia/service-runner",
  "dependencies": {
    "bluebird": "~2.2.2",
    "bunyan": "^1.4.0",
    "core-js": "^0.5.4",
    "extend": "^1.3.0",
    "gelf-stream": "^0.2.4",
    "js-yaml": "~3.2.2",
    "node-statsd": "^0.1.1",
    "node-txstatsd": "^0.1.5",
    "yargs": "^3.7.2"
  },
  "devDependencies": {
    "mocha": "~1.x.x",
    "mocha-jshint": "0.0.9",
    "istanbul": "0.3.5",
    "mocha-lcov-reporter": "0.0.1",
    "coveralls": "2.11.2"
  },
  "readme": "# service-runner\nGeneric nodejs service runner & supervisor\n\n## Features\n- Supervise and [cluster](http://nodejs.org/api/cluster.html) node services in a generic manner with a minimal interface:\n\n```javascript\nmodule.exports = function (options) {\n    var config = options.config;\n    // Logger instance\n    var logger = options.logger;\n    // Metrics reporter (txstatsd, statsd)\n    var metrics = options.metrics;\n\n    // Start the app, returning a promise\n    return startApp(config, logger, metrics);\n}\n```\n\n- standard command line parameters:\n```bash\nUsage: node ./service-runner.js [-h|-v] [--param[=val]]\n\nOptions:\n  -n, --num-workers  [default: -1]\n  -c, --config       [default: \"./config.yaml\"]\n  -v, --version      [default: false]\n  -h, --help         [default: false]\n```\n- [config loading](#config-loading)\n- flexible logging using bunyan, including logstash support via gelf: `logger.log('info/request', { message: 'foo', uri: req.uri })`\n- [metric reporting](#metric-reporting) using txstatsd or statsd: `statsd.timing('foo.GET.2xx', Date.now() - startTime)`\n- heap dumps\n\n## Usage\n```bash\nnpm install --save service-runner\n```\n\nIn package.json, configure `npm start` to call service-runner:\n```javascript\n  \"scripts\": {\n    \"start\": \"service-runner\"\n  }\n```\nCreate a `config.yaml` file following the spec below. Make sure to point the\nmodule parameter to your service's entry point.\n\nFinally, **start your service with `npm start`**. In npm >= 2.0 (node 0.12 or iojs), you can also pass parameters to `service-runner` like this: `npm start -- -c /etc/yourservice/config.yaml`.\n\nFor node 0.10 support, you can create a small wrapper script like this:\n```javascript\nvar ServiceRunner = require('service-runner');\nnew ServiceRunner().run();\n```\n\nWe are also working on a [standard\ntemplate](https://github.com/wikimedia/service-template-node) for node\nservices, which will set up this & other things for you.\n\n### Config loading\n- Default config locations in a project: `config.yaml` for a customized config,\n    and `config.example.yaml` for the defaults.\n- Default top-level config format (**draft**):\n\n```yaml\n# Number of worker processes to spawn. \n# Set to 0 to run everything in a single process without clustering.\nnum_workers: 1\n\n# Logger info\nlogging:\n  level: info\n  streams:\n  # Use gelf-stream -> logstash\n  - type: gelf\n    host: logstash1003.eqiad.wmnet\n    port: 12201\n\n# Statsd metrics reporter\nmetrics:\n  type: txstatsd\n  host: localhost\n  port: 8125\n\nservices:\n  - name: parsoid\n    # a relative path or the name of an npm package, if different from name\n    # module: ./lib/server.js\n\n    # optionally, a version constraint of the npm package\n    # version: ^0.4.0\n    \n    # per-service config\n    conf:\n        port: 12345\n        interface: localhost\n        # more per-service config settings\n```\n\n### Metric reporting\n\nWe basically expose the [node-statsd\ninterface](https://github.com/sivy/node-statsd):\n\n```javascript\n// Timing: sends a timing command with the specified milliseconds\noptions.metrics.timing('response_time', 42);\n\n// Increment: Increments a stat by a value (default is 1)\noptions.metrics.increment('my_counter');\n\n// Decrement: Decrements a stat by a value (default is -1)\noptions.metrics.decrement('my_counter');\n\n// Histogram: send data for histogram stat\noptions.metrics.histogram('my_histogram', 42);\n\n// Gauge: Gauge a stat by a specified amount\noptions.metrics.gauge('my_gauge', 123.45);\n\n// Set: Counts unique occurrences of a stat (alias of unique)\noptions.metrics.set('my_unique', 'foobar');\noptions.metrics.unique('my_unique', 'foobarbaz');\n\n// Incrementing multiple items\noptions.metrics.increment(['these', 'are', 'different', 'stats']);\n\n// Sampling, this will sample 25% of the time\n// the StatsD Daemon will compensate for sampling\noptions.metrics.increment('my_counter', 1, 0.25);\n\n// Tags, this will add user-defined tags to the data\noptions.metrics.histogram('my_histogram', 42, ['foo', 'bar']);\n```\n\nAll metrics are automatically prefixed by the config-provided service name /\ngraphite hierachy prefix to ensure a consistent graphite metric hierarchy.\n\n## Issue tracking\nPlease report issues in [the service-runner phabricator\nproject](https://phabricator.wikimedia.org/tag/service-runner/).\n\n## See also\n- https://github.com/Unitech/PM2 - A lot of features. Focus on interactive\n    use with commandline tools. Weak on logging (only local log files). Does\n    not support node 0.10's cluster module.\n- https://github.com/strongloop/strong-agent - commercial license. Focus on\n    profiling and monitoring, although a lot of the functionality is now\n    available in other libraries.\n- http://krakenjs.com/ - Focused more on MVC & templating rather than\n    supervision & modules\n- https://www.npmjs.com/package/forever-service - Hooks up [forever](https://github.com/foreverjs/forever) with various init systems; could be useful especially on less common platforms that don't have good init systems.\n",
  "readmeFilename": "README.md",
  "_id": "service-runner@0.2.1",
  "dist": {
    "shasum": "19c03ca80b519e7c0d49607cdb65d697f08bb7b2"
  },
  "_from": "service-runner@^0.2.1",
  "_resolved": "https://registry.npmjs.org/service-runner/-/service-runner-0.2.1.tgz"
}
