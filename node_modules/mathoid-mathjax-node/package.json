{
  "name": "mathoid-mathjax-node",
  "version": "0.6.5",
  "description": "API's for calling MathJax from node.js",
  "keywords": [
    "MathJax",
    "math",
    "svg",
    "MathML",
    "TeX",
    "AsciiMath"
  ],
  "maintainers": [
    {
      "name": "MathJax Consortium",
      "email": "info@mathjax.org",
      "url": "http://www.mathjax.org"
    }
  ],
  "bugs": {
    "url": "http://github.com/mathjax/MathJax-node/issues"
  },
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/mathjax/MathJax-node.git"
  },
  "dependencies": {
    "jsdom": "^6.0.0",
    "speech-rule-engine": "0.9.2",
    "yargs": "^3.0.0",
    "mathoid-mathjax": "2.5.3",
    "librsvg": "git+https://github.com/d00rman/node-rsvg.git#return-from-error"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "main": "./lib/mj-page.js",
  "devDependencies": {
    "tape": "^4.0.3"
  },
  "gitHead": "38d0138740f371f5ce1e5b627de100c94f2429ad",
  "readme": "# mathjax-node [![Build Status](https://travis-ci.org/wikimedia/MathJax-node.svg?branch=master)](https://travis-ci.org/wikimedia/MathJax-node)\n\nThis repository contains files that provide APIs to call MathJax from \nnode.js programs.  There is an API for converting individual math \nexpressions (in any of MathJax's input formats) into SVG images or MathML \ncode, and there is an API for converting HTML snippets containing any of \nMathJax input formats into HTML snippets containing SVG or MathML.\n\nSee the comments in the individual files for more details.\n\nThe `bin` directory contains a collection of command-line programs for \nconverting among MathJax's various formats.  These can be used as examples \nof calling the MathJax API.\n\nUse\n\n    npm install mathjax-node\n\nto install mathjax-node and its dependencies.\n\nThese API's can produce PNG images, but that requires the\n[librsvg](https://www.npmjs.com/package/librsvg) library.\nSee the link for installation. Tested with\n* Windows 8.1\n* Ubuntu 14 LTS\n\n# Getting started\n\nmathjax-node provides two libraries, `lib/mj-single.js` and `lib/mj-page.js`. Below are two  very minimal examples -- be sure to check out the examples in `./bin/` for more advanced configurations.\n\n* `lib/mj-single.js` is optimized for processing single equations.\n\n\n```javascript\n// a simple TeX-input example\nvar mjAPI = require(\"./lib/mj-single.js\");\nmjAPI.config({\n  MathJax: {\n    // traditional MathJax configuration\n  }\n});\nmjAPI.start();\n\nvar yourMath = 'E = mc^2';\n\nmjAPI.typeset({\n  math: yourMath,\n  format: \"TeX\", // \"inline-TeX\", \"MathML\"\n  mml:true, //  svg:true,\n}, function (data) {\n  if (!data.errors) {console.log(data.mml)}\n});\n```\n\n\n* `lib/mj-page.js` is optimized for handling full HTML pages. \n\n\n```javascript\nvar mjAPI = require(\"./lib/mj-page.js\");\nvar jsdom = require(\"jsdom\").jsdom;\n\nvar document = jsdom(\"<!DOCTYPE html><html lang='en'><head><title>Test</title></head><body><h1>Let's test mj-page</h1> <p> \\\\[f: X \\\\to Y\\\\], where \\\\( X = 2^{\\mathbb{N}}\\\\) </p></body></html>\");\n\nmjAPI.start();\n\nmjAPI.typeset({\n  html: document.body.innerHTML,\n  renderer: \"NativeMML\",\n  inputs: [\"TeX\"],\n  xmlns: \"mml\"\n}, function(result) {\n  \"use strict\";\n  document.body.innerHTML = result.html;\n  var HTML = \"<!DOCTYPE html>\\n\" + document.documentElement.outerHTML.replace(/^(\\n|\\s)*/, \"\");\n  console.log(HTML);\n});\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mathjax/MathJax-node#readme",
  "_id": "mathoid-mathjax-node@0.6.5",
  "_shasum": "256fee2d93629b9016d7cc6c179e4d8c98bc4bcf",
  "_from": "git+https://github.com/d00rman/MathJax-node.git#rsvg-errors",
  "_resolved": "git+https://github.com/d00rman/MathJax-node.git#38d0138740f371f5ce1e5b627de100c94f2429ad"
}
