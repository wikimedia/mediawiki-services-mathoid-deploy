{
  "name": "preq",
  "version": "0.4.7",
  "description": "Yet another promising request wrapper",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "author": {
    "name": "Gabriel Wicke",
    "email": "gwicke@wikimedia.org"
  },
  "license": "MIT",
  "dependencies": {
    "bluebird": "~2.8.2",
    "request": "^2.55.0"
  },
  "devDependencies": {
    "mocha": "x.x.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gwicke/preq.git"
  },
  "homepage": "https://github.com/gwicke/preq",
  "readme": "# preq [![Build Status](https://travis-ci.org/gwicke/preq.svg?branch=master)](https://travis-ci.org/gwicke/preq)\n\nYet another promising [request](https://github.com/request/request) wrapper.\n\n## Features\n- ES6 `Promise`-based, using the excellent\n    [bluebird](https://github.com/petkaantonov/bluebird/blob/master/API.md) by\n    default\n- Robustness: retry, timeout and connect timeout support\n- Proper error handling: All errors (incl. HTTP responses with code >= 400)\n    throw exceptions, and can be caught with `Promise.catch()`. This ensures\n    that all errors are handled, and often cleans up the code by clearly\n    separating out error handling. The `HTTPError` instance has all the\n    properties of a normal response.\n\n## Installation\n```\nnpm install preq\n```\n\n## Usage\n```javascript\nvar preq = require('preq');\n\nreturn preq.get({                   // or preq.request({ method: 'get', .. })\n    uri: 'http://google.com/',\n    headers: {\n        'x-foo': 'bar'\n    },\n    query: {\n        q: 'foo'\n    },\n    // body for POSTs or PUTs, can be object (serialized to JSON), Buffer or String\n})\n.then(function(res) {\n    /**\n     * { \n     *   status: 200,\n     *   headers: { \n     *     date: 'Sat, 21 Feb 2015 01:47:40 GMT' // , ...\n     *   },\n     *   body: '<!doctype html>...</html>' // or object if json\n     * }\n     */\n})\n.catch(function(err) {\n    // Any response with HTTP status >= 400\n    // err is HTTPError with same properties as response above\n});\n```\n\n\n## `preq`-specific parameters / methods\n`preq` passes through most options directly to\n[request](https://github.com/request/request), so see its documentation for\nadvanced options.\n\nAdditionally, it defines or modifies these request options:\n\n- `method`: Lowercase HTTP verbs. Automatically set by the verb methods (`preq.get()`,\n    `.post()` etc).\n- `uri`: use `uri`, *not* `url`.\n- `query`: query string parameters\n- `body`: `String`, `Buffer` or `Object`. If an object is supplied, the\n    serialization depends on the `content-type` header. Supported:\n    - `application/json.*`\n    - `multipart/form-data`\n    - `application/x-www-form-urlencoded`\n- `retries`: Maximum number of retries. Exponential back-off is used between retries.\n- `timeout`: Total request timeout. \n- `connectTimeout`: Maximum time to establish a TCP connection to the host, in\n    ms. Useful to quickly fail if a node is unreachable at the network level,\n    without waiting for the full `timeout` duration.\n\n\nAlso see [the tests](/test/index.js) for usage examples.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gwicke/preq/issues"
  },
  "_id": "preq@0.4.7",
  "dist": {
    "shasum": "a5f173ad21cd02704e87f78191a29ab96b8a2fb5"
  },
  "_from": "preq@^0.4.4",
  "_resolved": "https://registry.npmjs.org/preq/-/preq-0.4.7.tgz"
}
