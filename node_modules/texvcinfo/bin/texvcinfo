#!/usr/bin/env node

var program = require('commander');

var json = require('../package.json');

program
    .version(json.version)
    .usage('[options] <tex input>')
    .option('-v, --verbose', 'Show verbose error information')
    .option('-D, --debug', 'Show stack trace on failure.')
    .option('-c, --compact', 'Do not pretty print output.')
    .option('-f, --flat', 'Flattens the tree for elements with only one child')
    .option('-o, --output [format]', 'Output the info in a specific format. Available options are:\n' +
        '"list": prints all tokens as list\n' +
        '"tree": prints the texvc AST\n' +
        '"json": a json object that can be visualized using d3\n' +
        '"identifier": prints TeX code for all identifiers\n' +
        '"all": is a combination of list, tree and identifier \n' +
        '"feedback": returns data to generate user feedback in a ui', 'list');


program.parse(process.argv);

var input = program.args.join(' ');

var texvcinfo = require('../');
var result;
if (program.output === 'feedback') {
    result = texvcinfo.feedback(input);
} else {
    result = texvcinfo.texvcinfo(input,
        {debug: program.debug, format: program.output, flatTree: program.flat, compact: program.compact});
}

// output result
if (result.status === undefined) {
    if (program.compact) {
        console.log(JSON.stringify(result));
    } else {
        console.log(JSON.stringify(result, null, 2));
    }
} else if (result.status === 'F' || program.verbose) {
    console.log(result.status + (result.details || ''));
} else {
    console.log(result.status + (result.details || ''));
}
process.exit(result.status === undefined ? 0 : 1);
